{
  "hash": "6b3f734b0ec5d119d41192790bd8afe5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Implementing the Differential Pathlength Factor (DPF) in Python: the Scholkmann method\"\nformat: html\nbibliography: references.bib\n---\n\n\n\n\nI have news! I'm starting my postdoc at the Institut de Recerca Hospital Sant Joan de Déu (Barcelona, Spain) in September, joining Chiara Santolin's new research group. We will be carrying out experimental series as part of Chiara's ERC project GaLa (Gates to Language). This project involves newborns, infants, rats, and some computational modelling to investigate early language acquisition and its evolutionary roots. I'll be mostly involved with the neonates branch of the project, using fNIRS (functional near-infrared spectroscopy) to measure neocates' brain response to different audio stimuli. I'm new to fNIRS, so I was lucky to be able to spend two months at the Center of Brain and Cognitive Development (CBCD) at Birkbeck University (London, UK), under the supervision of Louisa Gossé from Emily Jones' group. The whole group was extremely generous with their time and knowledge, and after coming back from my research stay, I feel like returning some of my time to the fNIRS community. I will dedicate some blog posts to some of my progress in learning fNIRS and the underlying theory and associated preprocessing piplines, and the aim of making the learning curve a bit less steep for future newcomers.\n\n<- TODO: introduce formula ->\n\nIn this blog post, I will provide a very simple Python function to calculate the Differential Pathlength Factor (DPF) for a participant, given their age and the NIR wavelength, following Scholkman's method. The DPF is one of the many parameters that determine, according to the modified Beer-Lambert Law (mBLL), how light behaves when projected into biological tissue. The mBLL allows fNIRS researchers to estimate relative changes in concentration of different chromophores---like Oxyhemoglobin (HbO) and Deoxyhemoglobin (HbR)--in the tissue commprised between the soruce of light and a detector. The DPF parameter takes a numeric value specified a priori by the researcher, based on prior knowledge about the properties of the tissue. \n\nIt is not possible to determine exactly the true DPF, as this value is dependent on many factors outside the control or reach of the researcher. But there are some formulas to get a reasonable approximation. One of them was presented by [@scholkmann2013general]. The authors came up with an equation that takes into account the age of the participant, and the wavelength of the NIR light. These variables are then introduced in the following equation:\n\n<- TODO: introduce formula ->\n\n@scholkmann2013general then used a robust nonlinear least squares method to estimate the five parameters of interest, based on previously published datasets. The result is a formula in which one can introduce the age of the participant and the wavelength of interest, and obtain the estimated DPF:\n\n<- TODO: introduce formula ->\n\nI made a simple Python function to implement the function presented by @scholkmann2013general:\n\n::: {#a5dbd59b .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\n\ndef dpf_scholkman(\n    age: float or np.ndarray = 0.583, wavelength: float or np.ndarray = 760\n) -> float or np.ndarray:\n    coefs = {\n        \"alpha\": 223.3,\n        \"beta\": 0.05624,\n        \"gamma\": 0.8493,\n        \"delta\": -5.723e-7,\n        \"epsilon\": 0.001245,\n        \"zeta\": -0.9025,\n    }\n    dpf = (\n        coefs[\"alpha\"]\n        + coefs[\"beta\"] * (age ** coefs[\"gamma\"])\n        + coefs[\"delta\"] * wavelength**3\n        + coefs[\"epsilon\"] * wavelength**2\n        + coefs[\"zeta\"] * wavelength\n    )\n    return dpf\n```\n:::\n\n\nLet's try it out:\n\nLet's reproduce some of the figures in @scholkmann2013general.\n\n::: {#4aca9785 .cell execution_count=2}\n``` {.python .cell-code}\nage = np.linspace(0, 50, 100)\nwavelengths = np.linspace(690, 832, 100)\ndpf = np.vstack([dpf_scholkman(age, w) for w in wavelengths])\n```\n:::\n\n\n::: {#9f6d0e96 .cell execution_count=3}\n``` {.python .cell-code}\nfig, ax = plt.subplots(layout=\"constrained\")\nnorm = mpl.colors.Normalize(vmin=np.min(age), vmax=np.max(age))\ncycler = plt.cycler(\"color\", plt.cm.autumn(np.linspace(0, 1, 100)))\nx = np.vstack(np.array([age] * len(age))).transpose()\nplt.rcParams[\"axes.prop_cycle\"] = cycler\nfig.colorbar(\n    mpl.cm.ScalarMappable(norm=norm, cmap=\"autumn\"),\n    ax=ax,\n    orientation=\"horizontal\",\n    location=\"top\",\n    label=\"Wavelength (nm)\",\n    aspect=30,\n)\nax.plot(x, dpf.transpose())\nax.set_xlabel(\"Age (years)\")\nax.set_ylabel(\"DPF\")\nax.set_axisbelow(False)\nax.grid(color=\"gray\", alpha=0.1)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=683 height=490}\n:::\n:::\n\n\n::: {#15dacb9e .cell execution_count=4}\n``` {.python .cell-code}\nfig, ax = plt.subplots(layout=\"constrained\")\nnorm = mpl.colors.Normalize(vmin=np.min(wavelengths), vmax=np.max(wavelengths))\ncycler = plt.cycler(\"color\", plt.cm.autumn(np.linspace(0, 1, 100)))\nx = np.vstack(np.array([wavelengths] * len(wavelengths))).transpose()\nplt.rcParams[\"axes.prop_cycle\"] = cycler\nfig.colorbar(\n    mpl.cm.ScalarMappable(norm=norm, cmap=\"autumn\"),\n    ax=ax,\n    orientation=\"horizontal\",\n    location=\"top\",\n    label=\"Age (years)\",\n    aspect=30,\n)\nax.plot(x, dpf)\nax.set_xlabel(\"Wavelength (nm)\")\nax.set_ylabel(\"DPF\")\nax.set_axisbelow(False)\nax.grid(color=\"gray\", alpha=0.1)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=683 height=490}\n:::\n:::\n\n\n::: {#75b5fa9e .cell execution_count=5}\n``` {.python .cell-code}\nnorm = mpl.colors.Normalize(vmin=np.min(dpf), vmax=np.max(dpf))\n\nfig, ax = plt.subplots(layout=\"constrained\")\nax.imshow(dpf.transpose(), cmap=\"autumn\", aspect=\"auto\")\nax.set_yticks(\n    np.linspace(0, len(wavelengths), 10, dtype=int),\n    labels=np.linspace(min(wavelengths), max(wavelengths), 10, dtype=int),\n)\nax.set_xticks(\n    np.linspace(0, len(age), 10, dtype=int),\n    labels=np.linspace(min(age), max(age), 10, dtype=int),\n)\nfig.colorbar(\n    mpl.cm.ScalarMappable(norm=norm, cmap=\"autumn\"),\n    ax=ax,\n    orientation=\"horizontal\",\n    location=\"top\",\n    label=\"DPF\",\n    aspect=30,\n)\nax.set_ylabel(\"Wavelength (nm)\")\nax.set_xlabel(\"Age (years)\")\nax.invert_yaxis()\nax.set_axisbelow(False)\nax.grid(color=\"gray\", alpha=0.1)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=683 height=490}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}