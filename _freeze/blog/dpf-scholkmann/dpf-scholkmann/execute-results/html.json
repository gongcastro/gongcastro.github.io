{
  "hash": "8b7921b7c5657296edadafde4a477142",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Implementing the Differential Pathlength Factor (DPF) in Python: the Scholkmann method\"\nformat: html\nbibliography: references.bib\n---\n\n\nI have news! I'm starting my postdoc at the Institut de Recerca Hospital Sant Joan de Déu (Barcelona, Spain) in September, joining Chiara Santolin's new research group. We will be carrying out experimental series as part of [Chiara's ERC project GaLa (Gates to Language)](https://www.upf.edu/web/mdm-dtic/news/-/asset_publisher/Q8isUSRyuEXA/content/chiara-santolin-obtains-an-erc-starting-grant-for-her-gala-project/maximized). This project involves newborns, infants, rats, and some computational modelling to investigate early language acquisition and its evolutionary roots. I'll be mostly involved with the neonates branch of the project, using fNIRS (functional near-infrared spectroscopy) to measure neonates' brain response to different audio stimuli.\n\n::: {#fig-sjd layout-ncol=2}\n\n![](logo-sjd.jpg)\n\n![](hsjd.jpg)\n\n:::\n\n\nI'm new to fNIRS, so I was very lucky to be able to spend two months at Prof. Emily Jones group at the [Center of Brain and Cognitive Development (CBCD)](https://cbcd.bbk.ac.uk/) at Birkbeck University (London, UK), and two weeks at Prof. Judit Gervain's lab at the Università di Padova. Folks at CBCD and in Padova were extremely generous with their time and knowledge, and after coming back from these research stays I feel like returning some of my time to the fNIRS community. I will dedicate some upcoming blog posts to some of my progress in learning fNIRS and the underlying theory and associated preprocessing piplines, with the aim of making the learning curve a bit less steep for future newcomers. In this blog post, I will provide a very simple Python function to calculate the Differential Pathlength Factor (DPF) for a participant, given their age and the specific wavelength used, following Scholkman's method [@scholkmann2013general].\n\nTo estimate relative changes in concentration of HbO and HbR, most NIRS devices---particularly those that use a continuous wave (CW) system---shine a light into some tissue of interest at two wavelengths: one is more sensitive to changes in concentration of HbO, the other is more sensitive to changes in concentration of HbR. Light is shone from a source, travels through the tissue and is received by a detector. By estimating how much of the light gets attenuated, and by observing the spectral properties of the received light, NIRS provides an estimation of the presence of certain chromophores in the tissue. The modified Beer-Lambert Law (mBBL) (see @eq-1) describes how the light attenuation ($A$) changes for a particular wave length ($\\lambda$):\n\n$$\n\\Delta A = \\varepsilon(\\lambda) \\cdot \\Delta c \\cdot d \\cdot \\text{DPF}(\\lambda)\n$$ {#eq-1}\n\nwhere $\\varepsilon$ is the extinction coefficient of a molecule at a certain wavelength, $\\lambda$ is the wavelength of the inyected light, $c$ is the change in molecule concentration, $d$ is the source-detector distance, and $\\text{DPF}$ is the differential pathlength factor. The DPF specifies the increment in photon path length due to scattering: sometimes, photons \"bounce\" against other molecules, which increases the distance they travel thorugh the biological tissues, ultimately influencing the amount of light that the detected receives at a particular wavelength. The DPF parameter takes a numeric value specified a priori by the researcher, based on prior knowledge about the properties of the tissue. \n\nconventional CW-based NIRS devices cannot determine exactly the true DPF, as this value is dependent on many factors outside the control or reach of the researcher. But some methods provide a reasonable approximation. One of them was presented by [@scholkmann2013general]. The authors came up with an equation that takes into account the **age** of the participant, and the **wavelength** of the NIR light. These variables are then introduced in @eq-2:\n\n$$\n\\text{DPF} (\\lambda, A)= \\alpha + \\beta A ^{\\gamma} + \\delta \\lambda ^{3} + \\varepsilon \\lambda ^{2} + \\zeta \\lambda\n$$ {#eq-2}\n\nwhere $\\lambda$ is the wavelength, $A$ is the age of the participant, and $\\alpha$, $\\beta$, $\\delta$, $\\varepsilon$, and $\\zeta$ are the certain coefficients that were empirically estimated by @scholkmann2013general useing a robust nonlinear least squares method, based on previously published datasets. The result is a formula in which one can introduce the age of the participant and the wavelength of interest, and obtain the estimated DPF:\n\n$$\n\\text{DPF} (\\lambda, A)= 223.3 + 0.05624 A ^{0.8493} + −5.723 \\times 10^{−7} \\lambda ^{3} + 0.001245 \\lambda ^{2} + −0.9025 \\lambda\n$$\n\nI made a simple Python function to implement the equation:\n\n::: {#fc395d33 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\n\ndef dpf_scholkman(\n    age: float or np.ndarray = 0.583, wavelength: float or np.ndarray = 760\n) -> float or np.ndarray:\n    coefs = {\n        \"alpha\": 223.3,\n        \"beta\": 0.05624,\n        \"gamma\": 0.8493,\n        \"delta\": -5.723e-7,\n        \"epsilon\": 0.001245,\n        \"zeta\": -0.9025,\n    }\n    dpf = (\n        coefs[\"alpha\"]\n        + coefs[\"beta\"] * (age ** coefs[\"gamma\"])\n        + coefs[\"delta\"] * wavelength**3\n        + coefs[\"epsilon\"] * wavelength**2\n        + coefs[\"zeta\"] * wavelength\n    )\n    return dpf\n```\n:::\n\n\nLet's try it out:\n\n::: {#bc1ddd9e .cell execution_count=2}\n``` {.python .cell-code}\nage = 24  # years\nwl = 760  # wavelength\ndpf_scholkman(age, wl)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n6.122136155212161\n```\n:::\n:::\n\n\nLet's reproduce some of the figures in @scholkmann2013general.\n\n::: {#cell-fig-1a .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nage = np.linspace(0, 50, 100)\nwavelengths = np.linspace(690, 832, 100)\ndpf = np.vstack([dpf_scholkman(age, w) for w in wavelengths])\nfig, ax = plt.subplots(layout=\"constrained\")\nnorm = mpl.colors.Normalize(vmin=np.min(wavelengths), vmax=np.max(wavelengths))\ncycler = plt.cycler(\"color\", plt.cm.autumn(np.linspace(0, 1, 100)))\nx = np.vstack(np.array([age] * len(age))).transpose()\nfig.colorbar(\n    mpl.cm.ScalarMappable(norm=norm, cmap=\"autumn\"),\n    ax=ax,\n    orientation=\"horizontal\",\n    location=\"top\",\n    label=\"Wavelength (nm)\",\n    aspect=30,\n)\nplt.rcParams[\"axes.prop_cycle\"] = cycler\nax.plot(x, dpf.transpose())\nax.set_xlabel(\"Age (years)\")\nax.set_ylabel(\"DPF\")\nax.set_axisbelow(False)\nax.grid(color=\"gray\", alpha=0.1)\n```\n\n::: {.cell-output .cell-output-display}\n![Reproduction of Figure 1A in Scholkmann et al. Differential pathlength as a function of the age of the participant  (X-axis) and the wavelength (Y-axis).](dpf-scholkmann_files/figure-html/fig-1a-output-1.png){#fig-1a width=683 height=490}\n:::\n:::\n\n\n::: {#cell-fig-1b .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nfig, ax = plt.subplots(layout=\"constrained\")\nnorm = mpl.colors.Normalize(vmin=np.min(age), vmax=np.max(age))\ncycler = plt.cycler(\"color\", plt.cm.autumn(np.linspace(0, 1, 100)))\nx = np.vstack(np.array([wavelengths] * len(wavelengths))).transpose()\nfig.colorbar(\n    mpl.cm.ScalarMappable(norm=norm, cmap=\"autumn\"),\n    ax=ax,\n    orientation=\"horizontal\",\n    location=\"top\",\n    label=\"Age (years)\",\n    aspect=30,\n)\nplt.rcParams[\"axes.prop_cycle\"] = cycler\nax.plot(x, dpf)\nax.set_xlabel(\"Wavelength (nm)\")\nax.set_ylabel(\"DPF\")\nax.set_axisbelow(False)\nax.grid(color=\"gray\", alpha=0.1)\n```\n\n::: {.cell-output .cell-output-display}\n![Reproduction of Figure 1B in Scholkmann et al. Differential pathlength as a function of the wavelength (X-axis) and the age of the participant (Y-axis).](dpf-scholkmann_files/figure-html/fig-1b-output-1.png){#fig-1b width=683 height=490}\n:::\n:::\n\n\nWe can also visualise the behaviour of the DPF across ages and wavelengths as a 2D heatmap in @fig-2:\n\n::: {#cell-fig-2 .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nnorm = mpl.colors.Normalize(vmin=np.min(dpf), vmax=np.max(dpf))\n\nfig, ax = plt.subplots(layout=\"constrained\")\nax.imshow(dpf.transpose(), cmap=\"autumn\", aspect=\"auto\")\nax.set_yticks(\n    np.linspace(0, len(wavelengths), 10, dtype=int),\n    labels=np.linspace(min(wavelengths), max(wavelengths), 10, dtype=int),\n)\nax.set_xticks(\n    np.linspace(0, len(age), 10, dtype=int),\n    labels=np.linspace(min(age), max(age), 10, dtype=int),\n)\nfig.colorbar(\n    mpl.cm.ScalarMappable(norm=norm, cmap=\"autumn\"),\n    ax=ax,\n    orientation=\"horizontal\",\n    location=\"top\",\n    label=\"DPF\",\n    aspect=30,\n)\nax.set_ylabel(\"Wavelength (nm)\")\nax.set_xlabel(\"Age (years)\")\nax.invert_yaxis()\nax.set_axisbelow(False)\nax.grid(color=\"gray\", alpha=0.1)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![DPF as a function of participant age and wavelengths.](dpf-scholkmann_files/figure-html/fig-2-output-1.png){#fig-2 width=683 height=490}\n:::\n:::\n\n\n",
    "supporting": [
      "dpf-scholkmann_files"
    ],
    "filters": [],
    "includes": {}
  }
}