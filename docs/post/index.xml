<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Gonzalo García-Castro</title>
    <link>http://gongcastro.github.io/post/</link>
    <description>Recent content in Posts on Gonzalo García-Castro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Dec 2020 21:13:14 -0500</lastBuildDate><atom:link href="http://gongcastro.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello R Markdown</title>
      <link>http://gongcastro.github.io/2020/12/01/hello-r-markdown/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      
      <guid>http://gongcastro.github.io/2020/12/01/hello-r-markdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.</description>
    </item>
    
    <item>
      <title>Importing data from multiple files simultaneously in R</title>
      <link>http://gongcastro.github.io/2020/07/05/importing-data-from-multiple-files-simultaneously-in-r/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gongcastro.github.io/2020/07/05/importing-data-from-multiple-files-simultaneously-in-r/</guid>
      <description>TL;DRWe need to import several CSV or TXT files and merge them into one data frame in R. Regardless of what function we use to import the files, vectorising the operation using purrr::map in combination with do.call or dplyr::bind_rows is the most time-efficient method (~25 ms importing 50 files with 10,000 rows each), compared to for loops (~220ms) or using lapply (~123 ms). data.table::fread is the fastest function for importing data.</description>
    </item>
    
  </channel>
</rss>
