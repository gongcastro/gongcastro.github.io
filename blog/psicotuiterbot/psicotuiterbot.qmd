---
title: '\@psicotuiterbot: Un bot de Twitter para Psicotuiter'
date: '2021-12-29'
description: "He creado un bot de Twitter que hace RT a cualquier menci√≥n a #psicotuiter. El c√≥digo est√° escrito en R usando el paquete {rtweet} para interactuar con la API de Twitter, y est√° alojado en una Raspberry Pi que hace las veces de servidor ejecutando el c√≥digo cada 15 minutos usando CRON."
image: raspberry.jfif
categories:
  - r
  - rtweet
  - twitter
  - raspberry pi
  - bot
  - github
echo: false
message: false
warning: false
toc: true
fig-dpi: 1000
fig-align: center
---

<a href="https://twitter.com/psicotuiterbot?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-size="large" data-lang="es" data-show-count="false">Follow \@psicotuiterbot</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<div style="float:right">
<a class="twitter-timeline" data-width="220" data-height="400" href="https://twitter.com/psicotuiterbot?ref_src=twsrc%5Etfw">Tweets by psicotuiterbot</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

# La comunidad de Psicotuiter

**Psicotuiter** (aka. Psicotwitter) es una comunidad de perfiles de Twitter que hablan de Psicolog√≠a, entre otras cosas. No se trata de un grupo cerrado, sino de una etiqueta √∫til para mencionar a esta comunidad. Aunque sus l√≠mites son algo difusos (y ser√≠a absolutamente innecesario precisarlos), se podr√≠a considerar que esta comunidad existe de manera relativamente formal desde 2015, aproximadamente.


# Por qu√© un bot

Uno de los problemas que muchas personas de esta comunidad verbalizaba durante los √∫ltimos meses (aunque probablemente se trate de un fen√≥meno c√≠clico) es **lo f√°cilmente que un debate acalorado o incluso irrespetuoso entre dos personas o grupos de personas pod√≠a afecta al clima general de la comunidad**. Independientemente de la legitimidad de la discusi√≥n en curso, no es ideal que la experiencia en Twitter de una persona promedio en el d√≠a a d√≠a sea dependiente de un n√∫mero de interacciones tan reducidas. Alicia Franco hizo es su momento una encuesta capturando el **clima general de Psicotuiter** en su momento (los resultados est√°n disponibles tambi√©n en un paquete de R que desarrollamos, llamado [{psicotuiteR}](https://gongcastro.github.io/2021/11/14/creando-un-paquete-de-r-una-guia-informal-i/), disponible en [GitHub](https://github.com/gongcastro/psicotuiteR)):


<blockquote class="twitter-tweet"><p lang="es" dir="ltr">¬°Hola, hola!üåø <br>¬øOs acord√°is del cuestionario que hicimos sobre ‚ÄúClima en (Psico)Twitter&quot;?<br>üëá¬°Pues ya tenemos los resultados!üëá <a href="https://t.co/RbDM78LA0k">pic.twitter.com/RbDM78LA0k</a></p>&mdash; Ali ‚òªÔ∏é (@AliciaFrancoXVE) <a href="https://twitter.com/AliciaFrancoXVE/status/1352342172750786560?ref_src=twsrc%5Etfw">January 21, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


Lo mucho que este clima se extiende a trav√©s de toda la comunidad puede deberse en parte a la propia estructura de redes de amistad entre los diferentes perfiles. Mi opini√≥n y la de m√°s personas (aun no hemos mirado los datos, pero en alg√∫n momento nos gustar√≠a hacerlo), es que **la estructura de esta comunidad est√° muy centralizada**: muchas personas con relativamente pocos seguidores (0-400) siguen a unas pocas personas con relativamente muchos seguidores (5.000-20.000). Esto convertir√≠a a las segundas en poseedoras de una parte substancial del espacio de la comunidad. Recientemente hice un peque√±o hilo ampliando esta reflexi√≥n:


<blockquote class="twitter-tweet"><p lang="es" dir="ltr">Yo tengo una experiencia parecida a la de <a href="https://twitter.com/IreneFPinto?ref_src=twsrc%5Etfw">@IreneFPinto</a>. Mi TL es el mejor y recibo much√≠simo apoyo de la gente buena de aqu√≠. Pero esa es *mi* experiencia.<br><br>Ahora bien, tengo una peque√±a reflexi√≥n sobre la estructura de <a href="https://twitter.com/hashtag/psicotuiter?src=hash&amp;ref_src=twsrc%5Etfw">#psicotuiter</a> (importantes las aclaraciones al final): üßµ <a href="https://t.co/G77h8YRQdZ">https://t.co/G77h8YRQdZ</a></p>&mdash; Gon Garc√≠a-Castro (@gongcastro) <a href="https://twitter.com/gongcastro/status/1472157574522888192?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


Una de las consecuencias inmediatas de esto es que el contenido del timeline (TL) de la mayor√≠a de Psicotuiter depender√≠a de las **interacciones entre un peque√±o grupo de personas con muchos seguidores**. Teniendo en cuenta que las interacciones negativas tienden a extenderse m√°s r√°pido y llevarse m√°s atenci√≥n que las positivas o neutras (ej. [Bellovary et al., 2021](https://psyarxiv.com/2er67/)), el impacto de la estructura centralizada de la comunidad sobre el clima del TL de la persona promedio en Psicotuiter es importante.


Otra consecuencia posiblemente menos comentada, y sin embargo m√°s importante en mi opini√≥n, es que para la persona promedio tambi√©n **es m√°s dif√≠cil acceder a al resto de la comunidad** (es decir, a conocer e interactuar con otras cuentas) si no es a trav√©s de la mediaci√≥n de cuentas m√°s grandes que amplifiquen sus mensajes y los hagan llegar a otras cuentas peque√±as que tambi√©n les siguen. Creo que esto puede ser frustrante si utilizas Twitter no s√≥lo para leer contenido sino tambi√©n para generarlo o extender tus redes de apoyo (muy importantes en muchos casos).


A principios de Octubre de 2021 se me ocurri√≥ posible forma de **reducir el peso de las cuentas grandes sobre c√≥mo se distribuyen las interacciones en Psicotuiter**: un **bot que amplifica todos los mensajes potencialmente relevantes para la comunidad**, sin atender al n√∫mero de seguidores de la cuenta que lo ha escrito, ni a qu√© otras cuentas siguien a esa cuenta. Esto, en combinaci√≥n con que una parte relevante de Psicotuiter siga al bot, podr√≠a permitir que cuentas peque√±as accedan a una comunidad m√°s grande sin mediaci√≥n de otras cuentas.


# Creando el bot

## Escribiendo el c√≥digo

Un bot de Twitter no es m√°s que un **c√≥digo que se ejecuta autom√°ticamente de forma peri√≥dica** (ej., cada 15 minutos) y realiza una acci√≥n en Twitter a trav√©s de una cuenta (hacer un RT o responder a un tweet). Para poder realizar esta acci√≥n a trav√©s del c√≥digo, es necesario tener acceso a la **[API de Twitter](https://developer.twitter.com/en/portal/dashboard)**. API es un acr√≥nimo para *Application Programming Interface* y como dice su nombre, es una plataforma desde la que podemos interactuar con una aplicaci√≥n (en este caso Twitter) a trav√©s de programaci√≥n con una serie de comandos que el equipo de Twitter ha dise√±ado la API ha definido.


Nunca hab√≠a hecho un bot de Twitter, pero sab√≠a de la existencia de bastantes tutoriales para hacerlo. La mayor√≠a de los bots de Twitter (y por tanto de los tutoriales) est√°n escritos en Python y JavaScript, pero yo me encuentro algo m√°s c√≥modo con R. Adem√°s gran parte de Psicotuiter (especialmente quienes est√°n relacionades con la metodolog√≠a) tambi√©n est√° m√°s familiarizado con R. Mi intenci√≥n era hacer el bot lo m√°s **trasparente y accesible** para la comunidad, as√≠ que me decant√© por R. En un pricipio segu√≠ el [tutorial de Matt Dray](https://www.rostrum.blog/2020/09/21/londonmapbot/), en el que utiliza el paquete de R [{rtweet}](https://docs.ropensci.org/rtweet/9) para interactuar con la API de Twitter. Hay m√°s tutoriales que usan rtweet para crear un bot con R. Pero a diferencia de otros, este tutorial explicaba c√≥mo usar GitHub actions para ejecutar el c√≥digo de forma peri√≥dica. Ahora explico esto √∫ltimo. Mientras tanto, vamos al c√≥digo de R.


Primero cre√© un **[repositorio de GitHub](https://github.com/gongcastro/psicotuiterbot)** donde alojar el c√≥digo (GitHub es como un Google Drive especializado en c√≥digo donde adem√°s podemos hacer control de versiones de los archivos que subimos). Puedes echar un vistazo al c√≥digo de R en la carpeta R/. El c√≥digo principalmente recoge los **√∫ltimos tweets que se han escrito en las √∫ltimos 6 horas mencionando [#psicotuiter](https://twitter.com/hashtag/psicotuiter?src=hashtag_click&f=live) o [#psicotwitter](https://twitter.com/search?q=%23psicotwitter&src=typed_query&f=live) y los retuitea**. No me meter√© en detalle a explicar c√≥mo funciona el c√≥digo, pero aqu√≠ va un peque√±o resumen del programa. Si tienes curiosidad te recomiendo explorar el repositorio de GitHub, que contiene todo lo necesario para hacer funcionar el bot:


Primero cargamos el paquete de R [{dplyr}](https://dplyr.tidyverse.org/), que utilizamos en bastantes ocasiones en el programa, ajustamos un peque√±o detalle relacionado con el comportamiento de la API de Twitter, e instalamos los paquetes necesarios (en caso de que hayan cambiado) usando el pqeute de R [{renv}](https://rstudio.github.io/renv/articles/renv.html) (si no lo conoces y te interesa la reproducibilidad computacional tienes que echarle un vistazo).

```r
# bot R code
library(dplyr)
options(httr_oob_default = TRUE)
# restore packages
renv::restore()
```

A continuaci√≥n extraemos las **credenciales** que necesitamos para acceder a la API de Twitter (las paso a como variables de entorno para evitar hacerlas p√∫blicas, ya que eso der√≠a acceso a cualquiera a la cuenta de Twitter del bot). 

```r
# authenticate Twitter API
my_token <- rtweet::create_token(
    app = "psicotuiterbot",  # the name of the Twitter app
    consumer_key = Sys.getenv("TWITTER_CONSUMER_API_KEY"),
    consumer_secret = Sys.getenv("TWITTER_CONSUMER_API_KEY_SECRET"),
    access_token = Sys.getenv("TWITTER_ACCESS_TOKEN"),
    access_secret = Sys.getenv("TWITTER_ACCESS_TOKEN_SECRET"), 
    set_renv = FALSE
)
```

Luego **extraemos los tweets** usando rtweet, filtramos los que sean relevantes y no contengan posible contenido ofensivo (y alg√∫n otro filtro m√°s).


```r
library(dplyr)
# define hashtags
hashtags_vct <- c("#psicotuiter", "#psicotwitter", "#Psicotuiter", "#Psicotwitter", "#PsicoTuiter", "#PsicoTwitter")
hashtags <- paste(hashtags_vct, collapse = " OR ")
hate_words <- unlist(strsplit(Sys.getenv("HATE_WORDS"), " ")) # words banned from psicotuiterbot (separated by a space)
blocked_accounts <- unlist(strsplit(Sys.getenv("BLOCKED_ACCOUNTS"), " ")) # accounts banned from psicotuiterbot (separated by a space)
time_interval <- lubridate::now(tzone = "UCT")-lubridate::minutes(120)
# get mentions to #psicotuiter and others
all_tweets <- rtweet::search_tweets(
    hashtags, 
    type = "recent", 
    token = my_token, 
    include_rts = FALSE, 
    tzone = "CET"
) 
status_ids <- all_tweets %>% 
    filter(
        !(screen_name %in% gsub("@", "", blocked_accounts)),
        created_at >= time_interval, # 15 min
        !grepl(paste(hate_words, collapse = "|"), text), # filter out hate words
        stringr::str_count(text, "#") < 4, # no more than 3 hashtags
        lang %in% c("es", "und") # in Spanish or undefined language
    ) %>% 
    pull(status_id)
# get request ID
request_tweets <- rtweet::get_mentions(
    token = my_token, 
    tzone = "CET"
) 
```


Finalmente, **hacemos RT** uno a uno usando rtweet (si ya hab√≠amos hecho RT a uno de ellos simplemente se ignora). 

```r
if (nrow(request_tweets) > 0) {
    request_ids <- request_tweets %>% 
        filter(
            created_at >= time_interval, # 15 min
            grepl("@psicotuiterbot", text),
            grepl("rt|RT|Rt", text),
            !grepl(paste(hate_words, collapse = "|"), text) # filter out hate words
        ) %>% 
        pull(status_in_reply_to_status_id)
    
    # get requested IDS
    if (length(request_ids) > 0) {
        requested_ids <- rtweet::lookup_statuses(request_ids, token = my_token) %>% 
            filter(
                !grepl(paste(hate_words, collapse = "|"), text) # filter out hate words
            ) %>% 
            pull(status_id)
    } else {
        requested_ids <- NULL
    }
} else {
    requested_ids <- NULL
}
# RT all IDs
if (length(status_ids) > 0){
    for (i in 1:length(status_ids)){
        rtweet::post_tweet(
            retweet_id = unique(status_ids)[i], # vector with IDs
            token = my_token
        )
    }
    print(paste0(length(status_ids), " RT(s): ", paste(status_ids, collapse = ", ")))
} else {
    print("No tweets to RT")
}
```


Recientemente inclu√≠ un peque√±o bloque de c√≥digo para permitir que la gente solicitase un **RT para tuits que no mencionaban #psicotuiter**, pero podr√≠an ser de inter√©s para la comunidad. Para hacerlo solo hay que responder al tuit en cuesti√≥n mencionando a \@psicotuiterbot junto con la palabra RT (ej., "RT \@psicotuiterbot por favor").

```r
# tweet requests
if (length(requested_ids) > 0){
    for (i in 1:length(requested_ids)){
        rtweet::post_tweet(
            retweet_id = unique(requested_ids)[i], # vector with IDs
            token = my_token
        )
    }
    print(paste0(length(requested_ids), " request(s) posted: ", paste(requested_ids, collapse = ", ")))
} else {
    print("No requests")
}
```


## Ejecutando el c√≥digo

Lo que hace "bot" a un bot es que **no requiere intervenci√≥n manual** para que realice la acci√≥n que deseamos. Hay muchas opciones para conseguir esto, pero casi todas tienen un inconveniente: necesitamos que una m√°quina (ordenador/servidor, m√≥vil, etc.) est√© encendido en el momento en el que queremos ejecutar nuestro c√≥digo. En nuestro caso necesitamos que se ejecute cada 15 minutos, lo que implica que deber√≠amos tener un dispositivo conectado a la corrriente y funcionando todo el d√≠a. Tener mi ordenador personal haciendo esto no es una opci√≥n viable. Me encontr√© con dos alternativas.


### Primer intento (sale mal): GitHub actions

Como mencion√© antes, en el tutorial de Matt Dray se ilustra c√≥mo usar [**GitHub Actions**](https://github.com/features/actions) para ejecutar nuestro c√≥digo una vez est√° alojado en un repositorio de GitHub. GitHub Actions es un servicio que ofrece GitHub que permite ejecutar ciertos comandos en determinadas condiciones o cada cierto tiempo usando un servidor que ponen a nuestra disposici√≥n (con ciertos l√≠mites). Este grupo de comandos se denominan *workflows* o flujos de trabajo, y si los incluimos en una carpeta de nuestro repositorio llamada .github/workflows/ siguiendo cierto formato en un archivo YAML (.yml), GitHub se encargar√° de ejecutarlo sin nuestra intervenci√≥n. Hay buenos [tutoriales](https://www.youtube.com/watch?v=R8_veQiYBjI) sobre c√≥mo y cu√°ndo escribir *workflows* para GutHub Actions. El *workflow* principal era inicialmente este:

```yml
name: bot
on:
  push:
    branches:
      - main # run every time there is a push to main branch
      - test
jobs:
  psicotuiterbot-post:
    runs-on: macOS-latest
    env: #  twitter API keys (used to authenticate) defined in the gh actions environment
      TWITTER_CONSUMER_API_KEY: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
      TWITTER_CONSUMER_API_KEY_SECRET: ${{ secrets.TWITTER_CONSUMER_API_KEY_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1
      - uses: r-lib/actions/setup-renv@v1
        with:
          cache-version: 1
      - name: Restore packages using renv
        shell: Rscript {0}
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          renv::restore()
      - name: Create and post tweet
        run: Rscript R/bot.R
```

La gran ventaja de usar este sistema es que **no necesitamos usar nuestro ordenador personal, ya que usamos el que que GitHub nos asigna** (un servidor no deja de ser un ordenador). Pero tiene varios inconvenientes. El primero es que el proceso de establecer un *workflow* en GitHub Actions suele requerir varios intentos (en mi caso muchos). Esto suele deberse a problemas de reproducibilidad computacional: el c√≥digo funciona correctamente en mi ordenador porque en √©l tengo instalado todo el sofware del que depende. Cuando uso el servidor de GitHub, el sistema operativo suele necesitar que instalemos estas **dependencias** antes de ejecutar el c√≥digo. GitHub Actions permite cierta flexibilidad a la hora de seleccionar el software que viene instalado en el sistema operativo que vamos a usar (ej., R, compiladores de C++, dependencias de Linux, etc.). El problema es que muchas veces ni siquiera somos conscientes de cu√°ntas dependencias requiere nuestro c√≥digo. Con paciencia y muchas b√∫squedas de Google es posible solventar este problema.


Un segundo inconveniente que encontr√© a la hora de implementar el bot en GitHub Actions tiene que ver con los tiempos: instalar todas las dependencias del c√≥digo en el servidor cada 15 minutos (la configuraci√≥n se pierde casi totalmente tras cada ejecuci√≥n) es **poco eficiente**. Instalar las dependencias puede tardar m√°s de 10 minutos (en el caso de este bot). Esto puede adem√°s hacer fallar en ocasiones el flujo de trabajo. GitHub Actions tampoco es lo m√°s consistente del mundo, aunque no deja de ser gratis.


## Segundo intento (sale bien): Raspberry Pi

Tras varios problemas en la ejecuci√≥n del bot a trav√©s de GitHub Actions, decid√≠ cambiar de m√©todo. Por razones ajenas al bot, hac√≠a unos meses que ten√≠a muerta de aburrimiento una [**Raspberry Pi 4**](https://www.raspberrypi.com/products/raspberry-pi-4-model-b/) que compr√© con un amigo para jugar con ella. Este dispositivo es un mini-ordenador relativamente barato (~40‚Ç¨) que sali√≥ al mercado como herramienta educativa para ense√±ar a programar (ej., r√≥botica para ni√±es) pero que poco a poco ha ido tomando espacio en lugares de producci√≥n. Tiene mil posibilidades por su simplicidad y, en nuestro caso, por su bajo consumo: tener una Raspberry Pi funcionando todo el d√≠a **apenas tiene impacto sobre el consumo de luz**.


![Aqu√≠ est√° alojado el \@psicotuiterbot](raspberry.jfif)


Primero instal√© el c√≥digo en la Raspberry con sus dependencias: b√°sicamente, clon√© el repositorio de GitHub en una carpeta dentro de home/Documents/. Para ejecutar el c√≥digo cada 15 minutos utilic√© una funci√≥n muy √∫til que incluye Linux (sistema operativo con el que funciona la Raspberry) llamado **CRON**. Simplemente consiste en un archivo en el que incluimos una serie de comandos que queremos que se ejecuten de forma peri√≥dica, junto con una c√≥digo que indica la periodicidad de la ejcuci√≥n de este comando. Aqu√≠ tienes unos [ejemplos](https://crontab.guru/examples.html). Inclu√≠ cuatro comandos (cada uno en su propio archivo con extensi√≥n .sh, que denota comandos de Linux):


```sh
# descarga el c√≥digo de GitHub, por si ha habido cambios
git pull origin main
# ejecuta el c√≥digo principal del bot
TZ="Spain/Madrid" Rscript -e 'source("R/bot.R")'
# guarda los tweets detectados en un archivo y crea un gr√°fico
Rscript -e 'source("R/counts.R")'
rm Rplots.pdf
# sube los nuevos datos a GitHub
git add .
git commit -m "Update repository"
git push
```

Estos comandos se ejecutan en este orden cada 15 minutos. 


# Bloqueando usuarios de forma remota

Debido a que algunas cuentas intentaron hacer un mal uso del bot, y tambi√©n porque otras mencionaron no querer ser retuiteadas por el bot a pesar de usar el hashtag, recientemente he a√±adido un peque√±o script que permite **bloquear usuarios que con tan s√≥lo enviar al bot un mensaje directo** de Twitter. El script **R/block.R** accede a los 10 √∫ltimos mensajes recibidos por parte de usuaries "VIP" (de momento, s√≥lo yo) y a√±ade el nombre de usuario que contiene el mensaje a la variable global definida en el archivo .Renviron. De esta forma, aunque no tenga acceso a la Raspberry Pi de forma local (y por tanto, tampoco al bot), s√≠ puedo hacer el **que el propio bot modifique los archivos locales** a trav√©s de mensajes directos de Twitter sin tener que desvelar el contenido de la lista de usuarios bloqueados. Podr√≠a ser m√°s f√°cil simplemente a√±adir la lista bloqueados al script como una variable (un vector, por ejemplo). El c√≥digo se actualizar√≠a cada 15 minutos a trav√©s del script sh/git-pull.sh y el vector de usuarios bloqueados lo har√≠a tambi√©n. Este m√©todo tendr√≠a la desventaja de que esa lista se har√≠a p√∫blica en el repositorio de GitHub. Al pasar esa lista como una variable de entorno a trav√©s de .Renviron puedo **cargar ese vector sin desvelar us contenidos**, al igual que hago para pasar las credenciales de la API de Twitter a la sesi√≥n de R. Este es el c√≥digo:

```r
vip_users <- unlist(strsplit(Sys.getenv("VIP_USERS"), " "))
blocked_accounts <- Sys.getenv("BLOCKED_ACCOUNTS")
blocked_accounts_vct <- unlist(strsplit(blocked_accounts, split = " "))
# get DMs
msg <- rtweet::direct_messages(n = 10, token = my_token)$events
# if new DMs have been received
if (nrow(msg) > 0){
    # for each received DM
    for (i in 1:nrow(msg)){
        msg_text <- msg$message_create$message_data$text[i]
        is_block <- grepl("block|block|bloquea", tolower(msg_text))
        sender_name <- rtweet::lookup_users(msg$message_create$sender_id[i], token = my_token)$screen_name
        
        # if message is sent by VIP user and contains keyword "block"
        if (is_block & (paste0("@", sender_name) %in% vip_users)){
            msg_text_vct <- unlist(strsplit(msg_text, " "))
            target_users <- msg_text_vct[grepl("@", msg_text_vct)]
            
            # if at least one targeted users has not been blocked yet
            if (!all(target_users %in% blocked_accounts_vct)){
                target_users_str <- paste0(target_users, collapse = " ")
                blocked_accounts_new <- paste0(blocked_accounts, " ", target_users_str)
                renviron_text <- paste0('BLOCKED_ACCOUNTS = "', blocked_accounts_new, '"')
                write(renviron_text, ".Renviron", append = TRUE)
                message(paste0("User(s) ", paste0(target_users_str, collapse = " "), " is now blocked"))
                
            } else {
                repeated_target <- target_users[which(target_users %in% blocked_accounts_vct)]
                message(paste0("User(s) ", paste0(repeated_target, collapse = " "), " has already been blocked"))
            }
        } else {
            message(paste0("Message from a non-VIP: ", paste0("@", sender_name)))
        }
    }
}
```

# Conclusiones

De momento, el bot est√° funcionando bastante bien y se le est√° dando bastante uso, especialmente por parte de cuentas peque√±as. A√∫n tengo pendiente hacer un an√°lisis m√°s profundo de qu√© tipo de actividad tiene lugar en el bot, pero mi impresi√≥n es que la mayor√≠a de usos consisten en petitiones de referencias de profesionales de psicolog√≠a en poblaciones concretas o de referencias bilbiogr√°ficas.

